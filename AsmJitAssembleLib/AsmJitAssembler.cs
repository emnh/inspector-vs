/*
// This file was auto-generated by CodeGen.GenerateAsmJitAssemblerMethod

using AsmJit.AssemblerContext;
using AsmJit.Common.Operands;
using SharpDisasm.Udis86;
using System;

namespace AsmJitAssembleLib {
    public class AsmJitAssembler {
        public static void AsmJitAssemble(CodeContext context, SharpDisasm.Instruction instruction) {
            switch (instruction.Mnemonic) {
                case ud_mnemonic_code.UD_Iaaa:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaad:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaam:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaas:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iadc: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Adc(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Adc(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Adc(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Adc(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Adc(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Adc(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Adc(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Adc(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Adc(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iadd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Add(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Add(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Add(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Add(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Add(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Add(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Add(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Add(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Add(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaddpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Addpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Addpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaddps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Addps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Addps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaddsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Addsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Addsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaddss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Addss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Addss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaddsubpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Addsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Addsubpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaddsubps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Addsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Addsubps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaesdec: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Aesdec(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Aesdec(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaesdeclast: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Aesdeclast(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Aesdeclast(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaesenc: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Aesenc(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Aesenc(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaesenclast: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Aesenclast(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Aesenclast(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaesimc: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Aesimc(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Aesimc(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iaeskeygenassist: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Aeskeygenassist(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Aeskeygenassist(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Aeskeygenassist(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Aeskeygenassist(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Aeskeygenassist(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Aeskeygenassist(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iand: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.And(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.And(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.And(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.And(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.And(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.And(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.And(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.And(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.And(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iandnpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Andnpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Andnpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iandnps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Andnps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Andnps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iandpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Andpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Andpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iandps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Andps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Andps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iarpl:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iblendpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Blendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Blendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Blendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Blendpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Blendpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Blendpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iblendps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Blendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Blendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Blendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Blendps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Blendps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Blendps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iblendvpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Blendvpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Blendvpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iblendvps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Blendvps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Blendvps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibound:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibsf: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Bsf(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Bsf(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibsr: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Bsr(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Bsr(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibswap: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Bswap(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibt: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Bt(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Bt(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Bt(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Bt(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Bt(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Bt(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Bt(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Bt(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibtc: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Btc(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Btc(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Btc(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Btc(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Btc(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Btc(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Btc(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Btc(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibtr: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Btr(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Btr(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Btr(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Btr(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Btr(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Btr(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Btr(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Btr(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ibts: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Bts(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Bts(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Bts(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Bts(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Bts(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Bts(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Bts(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Bts(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icall: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        var varIntPtr0 = new Lazy<MaybeOption<IntPtr>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (IntPtr)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Call(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Call(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Call(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Call(varImmediate0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varIntPtr0.Value.Present) {
                            context.Call(varIntPtr0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icbw: {
                        if (instruction.Operands.Length == 0) {
                            context.Cbw();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icdq: {
                        if (instruction.Operands.Length == 0) {
                            context.Cdq();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icdqe: {
                        if (instruction.Operands.Length == 0) {
                            context.Cdqe();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iclc: {
                        if (instruction.Operands.Length == 0) {
                            context.Clc();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icld: {
                        if (instruction.Operands.Length == 0) {
                            context.Cld();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iclflush: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Clflush(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iclgi:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Icli:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iclts:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmc: {
                        if (instruction.Operands.Length == 0) {
                            context.Cmc();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmova: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmova(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmova(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovae: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovae(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovae(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovb: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovb(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovb(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovbe: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovbe(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovbe(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovg: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovg(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovg(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovge: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovge(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovge(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovl: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovl(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovl(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovle: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovle(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovle(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovno: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovno(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovno(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovnp: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovnp(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovnp(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovns: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovns(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovns(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovnz: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovnz(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovnz(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovo: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovo(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovo(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovp: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovp(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovp(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovs: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovs(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovs(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmovz: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmovz(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmovz(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmp: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmp(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cmp(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Cmp(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Cmp(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Cmp(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmp(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Cmp(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Cmp(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Cmp(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmppd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Cmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Cmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmppd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Cmppd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Cmppd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Cmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Cmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmpps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Cmpps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Cmpps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpsb: {
                        if (instruction.Operands.Length == 0) {
                            context.Cmpsb();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Cmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Cmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmpsd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Cmpsd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Cmpsd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Cmpsd();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpsq: {
                        if (instruction.Operands.Length == 0) {
                            context.Cmpsq();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Cmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Cmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Cmpss(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Cmpss(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Cmpss(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpsw: {
                        if (instruction.Operands.Length == 0) {
                            context.Cmpsw();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpxchg: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmpxchg(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cmpxchg(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpxchg16b: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Cmpxchg16b(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icmpxchg8b: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Cmpxchg8b(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icomisd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Comisd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Comisd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icomiss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Comiss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Comiss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icpuid: {
                        if (instruction.Operands.Length == 0) {
                            context.Cpuid();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icqo: {
                        if (instruction.Operands.Length == 0) {
                            context.Cqo();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icrc32: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Crc32(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Crc32(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtdq2pd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtdq2pd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtdq2pd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtdq2ps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtdq2ps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtdq2ps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtpd2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtpd2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtpd2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtpd2pi: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtpd2pi(varMmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtpd2pi(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtpd2ps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtpd2ps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtpd2ps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtpi2pd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Cvtpi2pd(varXmmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtpi2pd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtpi2ps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Cvtpi2ps(varXmmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtpi2ps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtps2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtps2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtps2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtps2pd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtps2pd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtps2pd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtps2pi: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtps2pi(varMmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtps2pi(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtsd2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtsd2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtsd2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtsd2ss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtsd2ss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtsd2ss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtsi2sd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cvtsi2sd(varXmmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtsi2sd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtsi2ss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Cvtsi2ss(varXmmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtsi2ss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtss2sd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtss2sd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtss2sd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvtss2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvtss2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvtss2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvttpd2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvttpd2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvttpd2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvttpd2pi: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvttpd2pi(varMmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvttpd2pi(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvttps2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvttps2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvttps2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvttps2pi: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvttps2pi(varMmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvttps2pi(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvttsd2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvttsd2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvttsd2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icvttss2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Cvttss2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Cvttss2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icwd: {
                        if (instruction.Operands.Length == 0) {
                            context.Cwd();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Icwde: {
                        if (instruction.Operands.Length == 0) {
                            context.Cwde();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idaa: {
                        if (instruction.Operands.Length == 0) {
                            context.Daa();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idas: {
                        if (instruction.Operands.Length == 0) {
                            context.Das();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idec: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Dec(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Dec(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idiv: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Div(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Div(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idivpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Divpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Divpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idivps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Divps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Divps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idivsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Divsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Divsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idivss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Divss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Divss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idppd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Dppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Dppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Dppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Dppd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Dppd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Dppd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Idpps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Dpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Dpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Dpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Dpps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Dpps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Dpps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iemms: {
                        if (instruction.Operands.Length == 0) {
                            context.Emms();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ienter: {
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        if (instruction.Operands.Length == 2 && varImmediate0.Value.Present && varImmediate1.Value.Present) {
                            context.Enter(varImmediate0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iextractps: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Extractps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Extractps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Extractps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Extractps(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Extractps(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Extractps(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_If2xm1: {
                        if (instruction.Operands.Length == 0) {
                            context.F2xm1();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifabs: {
                        if (instruction.Operands.Length == 0) {
                            context.Fabs();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifadd: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        var varFpRegister1 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (FpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varFpRegister0.Value.Present && varFpRegister1.Value.Present) {
                            context.Fadd(varFpRegister0.Value.Value, varFpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fadd(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifaddp: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Faddp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Faddp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifbld: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fbld(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifbstp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fbstp(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifchs: {
                        if (instruction.Operands.Length == 0) {
                            context.Fchs();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifclex: {
                        if (instruction.Operands.Length == 0) {
                            context.Fclex();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmovb: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmovb(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmovbe: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmovbe(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmove: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmove(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmovnb: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmovnb(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmovnbe: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmovnbe(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmovne: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmovne(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmovnu: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmovnu(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcmovu: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcmovu(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcom: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcom(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fcom();
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fcom(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcom2:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcomi: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcomi(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcomip: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcomip(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcomp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fcomp(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fcomp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fcomp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcomp3:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcomp5:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcompp: {
                        if (instruction.Operands.Length == 0) {
                            context.Fcompp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifcos: {
                        if (instruction.Operands.Length == 0) {
                            context.Fcos();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifdecstp: {
                        if (instruction.Operands.Length == 0) {
                            context.Fdecstp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifdiv: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        var varFpRegister1 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (FpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varFpRegister0.Value.Present && varFpRegister1.Value.Present) {
                            context.Fdiv(varFpRegister0.Value.Value, varFpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fdiv(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifdivp: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fdivp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fdivp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifdivr: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        var varFpRegister1 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (FpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varFpRegister0.Value.Present && varFpRegister1.Value.Present) {
                            context.Fdivr(varFpRegister0.Value.Value, varFpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fdivr(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifdivrp: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fdivrp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fdivrp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifemms: {
                        if (instruction.Operands.Length == 0) {
                            context.Femms();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iffree: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Ffree(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iffreep:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifiadd: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fiadd(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ificom: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Ficom(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ificomp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Ficomp(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifidiv: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fidiv(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifidivr: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fidivr(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifild: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fild(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifimul: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fimul(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifincstp: {
                        if (instruction.Operands.Length == 0) {
                            context.Fincstp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifist: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fist(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifistp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fistp(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifisttp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fisttp(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifisub: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fisub(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifisubr: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fisubr(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifld: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fld(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fld(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifld1: {
                        if (instruction.Operands.Length == 0) {
                            context.Fld1();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldcw: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fldcw(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldenv: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fldenv(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldl2e: {
                        if (instruction.Operands.Length == 0) {
                            context.Fldl2e();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldl2t: {
                        if (instruction.Operands.Length == 0) {
                            context.Fldl2t();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldlg2: {
                        if (instruction.Operands.Length == 0) {
                            context.Fldlg2();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldln2: {
                        if (instruction.Operands.Length == 0) {
                            context.Fldln2();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldpi: {
                        if (instruction.Operands.Length == 0) {
                            context.Fldpi();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifldz: {
                        if (instruction.Operands.Length == 0) {
                            context.Fldz();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifmul: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        var varFpRegister1 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (FpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varFpRegister0.Value.Present && varFpRegister1.Value.Present) {
                            context.Fmul(varFpRegister0.Value.Value, varFpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fmul(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifmulp: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fmulp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fmulp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifndisi:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifneni:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifninit: {
                        if (instruction.Operands.Length == 0) {
                            context.Fninit();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifnop: {
                        if (instruction.Operands.Length == 0) {
                            context.Fnop();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifnsave: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fnsave(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifnsetpm:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifnstcw: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fnstcw(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifnstenv: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fnstenv(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifnstsw: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Fnstsw(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fnstsw(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifpatan: {
                        if (instruction.Operands.Length == 0) {
                            context.Fpatan();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifprem: {
                        if (instruction.Operands.Length == 0) {
                            context.Fprem();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifprem1: {
                        if (instruction.Operands.Length == 0) {
                            context.Fprem1();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifptan: {
                        if (instruction.Operands.Length == 0) {
                            context.Fptan();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifrndint: {
                        if (instruction.Operands.Length == 0) {
                            context.Frndint();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifrstor: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Frstor(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifrstpm:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifscale: {
                        if (instruction.Operands.Length == 0) {
                            context.Fscale();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifsin: {
                        if (instruction.Operands.Length == 0) {
                            context.Fsin();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifsincos: {
                        if (instruction.Operands.Length == 0) {
                            context.Fsincos();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifsqrt: {
                        if (instruction.Operands.Length == 0) {
                            context.Fsqrt();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifst: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fst(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fst(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifstp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fstp(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fstp(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifstp1:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifstp8:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifstp9:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifsub: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        var varFpRegister1 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (FpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varFpRegister0.Value.Present && varFpRegister1.Value.Present) {
                            context.Fsub(varFpRegister0.Value.Value, varFpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fsub(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifsubp: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fsubp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fsubp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifsubr: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        var varFpRegister1 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (FpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varFpRegister0.Value.Present && varFpRegister1.Value.Present) {
                            context.Fsubr(varFpRegister0.Value.Value, varFpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fsubr(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifsubrp: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fsubrp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fsubrp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iftst: {
                        if (instruction.Operands.Length == 0) {
                            context.Ftst();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifucom: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fucom(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fucom();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifucomi: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fucomi(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifucomip: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fucomip(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifucomp: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fucomp(varFpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Fucomp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifucompp: {
                        if (instruction.Operands.Length == 0) {
                            context.Fucompp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifxam: {
                        if (instruction.Operands.Length == 0) {
                            context.Fxam();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifxch: {
                        var varFpRegister0 = new Lazy<MaybeOption<FpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (FpRegister)null));
                        if (instruction.Operands.Length == 1 && varFpRegister0.Value.Present) {
                            context.Fxch(varFpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifxch4:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifxch7:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifxrstor: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fxrstor(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifxsave: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Fxsave(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifxtract: {
                        if (instruction.Operands.Length == 0) {
                            context.Fxtract();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifyl2x: {
                        if (instruction.Operands.Length == 0) {
                            context.Fyl2x();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ifyl2xp1: {
                        if (instruction.Operands.Length == 0) {
                            context.Fyl2xp1();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Igetsec:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ihaddpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Haddpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Haddpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ihaddps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Haddps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Haddps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ihlt:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ihsubpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Hsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Hsubpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ihsubps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Hsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Hsubps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iidiv: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Idiv(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Idiv(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iimul: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Imul(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Imul(varGpRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iin:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinc: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Inc(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Inc(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinsb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinsd:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinsertps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Insertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Insertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Insertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Insertps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Insertps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Insertps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinsw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iint: {
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        var varInt640 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Int64)0));
                        var varUInt640 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (UInt64)0));
                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Int(varImmediate0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varInt640.Value.Present) {
                            context.Int(varInt640.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varUInt640.Value.Present) {
                            context.Int(varUInt640.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iint1:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iint3: {
                        if (instruction.Operands.Length == 0) {
                            context.Int3();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinto:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinvd:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinvept:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinvlpg:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinvlpga:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinvvpid:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iiretd:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iiretq:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iiretw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ija: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Ja(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Ja(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijae: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jae(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jae(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijb: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jb(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jb(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijbe: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jbe(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jbe(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijcxz:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijecxz: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varLabel1 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Label)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varLabel1.Value.Present) {
                            context.Jecxz(varGpRegister0.Value.Value, varLabel1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Jecxz(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijg: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jg(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jg(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijge: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jge(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jge(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijl: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jl(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jl(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijle: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jle(varLabel0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijmp: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        var varIntPtr0 = new Lazy<MaybeOption<IntPtr>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (IntPtr)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Jmp(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Jmp(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jmp(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jmp(varImmediate0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varIntPtr0.Value.Present) {
                            context.Jmp(varIntPtr0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijno: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jno(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jno(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijnp: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jnp(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jnp(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijns: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jns(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jns(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijnz: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jnz(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jnz(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijo: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jo(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jo(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijp: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jp(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jp(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijrcxz:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijs: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Js(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Js(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ijz: {
                        var varLabel0 = new Lazy<MaybeOption<Label>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Label)null));
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        if (instruction.Operands.Length == 1 && varLabel0.Value.Present) {
                            context.Jz(varLabel0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Jz(varImmediate0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilahf: {
                        if (instruction.Operands.Length == 0) {
                            context.Lahf();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilar:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilddqu: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Lddqu(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ildmxcsr: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Ldmxcsr(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilds:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilea: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Lea(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ileave: {
                        if (instruction.Operands.Length == 0) {
                            context.Leave();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iles:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilfence: {
                        if (instruction.Operands.Length == 0) {
                            context.Lfence();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilfs:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilgdt:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilgs:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilidt:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Illdt:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilmsw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilock:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilodsb: {
                        if (instruction.Operands.Length == 0) {
                            context.Lodsb();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilodsd: {
                        if (instruction.Operands.Length == 0) {
                            context.Lodsd();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilodsq: {
                        if (instruction.Operands.Length == 0) {
                            context.Lodsq();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilodsw: {
                        if (instruction.Operands.Length == 0) {
                            context.Lodsw();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iloop:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iloope:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iloopne:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilsl:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ilss:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iltr:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Imaskmovdqu: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Maskmovdqu(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imaskmovq: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Maskmovq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imaxpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Maxpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Maxpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imaxps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Maxps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Maxps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imaxsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Maxsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Maxsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imaxss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Maxss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Maxss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imfence: {
                        if (instruction.Operands.Length == 0) {
                            context.Mfence();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iminpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Minpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Minpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iminps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Minps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Minps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iminsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Minsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Minsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iminss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Minss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Minss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imonitor: {
                        if (instruction.Operands.Length == 0) {
                            context.Monitor();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imontmul:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Imov: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varSegRegister1 = new Lazy<MaybeOption<SegRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (SegRegister)null));
                        var varSegRegister0 = new Lazy<MaybeOption<SegRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (SegRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Mov(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Mov(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Mov(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Mov(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Mov(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Mov(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Mov(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Mov(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Mov(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varSegRegister1.Value.Present) {
                            context.Mov(varGpRegister0.Value.Value, varSegRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varSegRegister1.Value.Present) {
                            context.Mov(varMemory0.Value.Value, varSegRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varSegRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Mov(varSegRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varSegRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Mov(varSegRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovapd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movapd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movapd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movapd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovaps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movaps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movaps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movaps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovbe: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movbe(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movbe(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovd: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movd(varXmmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varMmRegister1.Value.Present) {
                            context.Movd(varMemory0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Movd(varGpRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movd(varMmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovddup: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movddup(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movddup(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovdq2q: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movdq2q(varMmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovdqa: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movdqa(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movdqa(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movdqa(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovdqu: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movdqu(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movdqu(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movdqu(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovhlps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movhlps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovhpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movhpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movhpd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovhps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movhps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movhps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovlhps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movlhps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovlpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movlpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movlpd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovlps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movlps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movlps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovmskpd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movmskpd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovmskps: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movmskps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovntdq: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movntdq(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovntdqa: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movntdqa(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovnti: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movnti(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovntpd: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movntpd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovntps: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movntps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovntq: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varMmRegister1.Value.Present) {
                            context.Movntq(varMemory0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movq(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movq(varXmmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Movq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varMmRegister1.Value.Present) {
                            context.Movq(varMemory0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Movq(varGpRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movq(varMmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovq2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Movq2dq(varXmmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovsb: {
                        if (instruction.Operands.Length == 0) {
                            context.Movsb();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movsd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 0) {
                            context.Movsd();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovshdup: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movshdup(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movshdup(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovsldup: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movsldup(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movsldup(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovsq: {
                        if (instruction.Operands.Length == 0) {
                            context.Movsq();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movss(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovsw: {
                        if (instruction.Operands.Length == 0) {
                            context.Movsw();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovsx: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movsx(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movsx(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovsxd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movsxd(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movsxd(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovupd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movupd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movupd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movupd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovups: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movups(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movups(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Movups(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imovzx: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Movzx(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Movzx(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Impsadbw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Mpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Mpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Mpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Mpsadbw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Mpsadbw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Mpsadbw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imul: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Mul(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Mul(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imulpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Mulpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Mulpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imulps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Mulps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Mulps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imulsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Mulsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Mulsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imulss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Mulss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Mulss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Imwait: {
                        if (instruction.Operands.Length == 0) {
                            context.Mwait();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ineg: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Neg(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Neg(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Inop: {
                        if (instruction.Operands.Length == 0) {
                            context.Nop();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Inot: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Not(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Not(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ior: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Or(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Or(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Or(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Or(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Or(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Or(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Or(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Or(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Or(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iorpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Orpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Orpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iorps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Orps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Orps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iout:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ioutsb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ioutsd:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ioutsw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipabsb: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pabsb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pabsb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pabsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pabsb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipabsd: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pabsd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pabsd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pabsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pabsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipabsw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pabsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pabsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pabsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pabsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipackssdw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Packssdw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Packssdw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Packssdw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Packssdw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipacksswb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Packsswb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Packsswb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Packsswb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Packsswb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipackusdw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Packusdw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Packusdw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipackuswb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Packuswb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Packuswb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Packuswb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Packuswb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddq: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddsb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddsb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddsb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddsb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddsw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddusb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddusb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddusb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddusb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddusb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddusw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddusw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddusw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddusw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddusw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipaddw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Paddw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Paddw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Paddw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipalignr: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Palignr(varMmRegister0.Value.Value, varMmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Palignr(varMmRegister0.Value.Value, varMmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Palignr(varMmRegister0.Value.Value, varMmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Palignr(varMmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Palignr(varMmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Palignr(varMmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Palignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Palignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Palignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Palignr(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Palignr(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Palignr(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipand: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pand(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pand(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pand(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pand(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipandn: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pandn(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pandn(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pandn(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pandn(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipavgb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pavgb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pavgb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pavgb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pavgb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipavgusb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipavgw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pavgw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pavgw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pavgw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pavgw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipblendvb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pblendvb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pblendvb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipblendw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pblendw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pblendw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pblendw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipclmulqdq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pclmulqdq(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pclmulqdq(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pclmulqdq(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpeqb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpeqb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpeqb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpeqb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pcmpeqb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpeqd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpeqd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpeqd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pcmpeqd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpeqd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpeqq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpeqq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpeqq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpeqw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpeqw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpeqw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pcmpeqw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpeqw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpestri: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpestri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpestri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpestri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpestri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpestri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpestri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpestrm: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpestrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpestrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpestrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpestrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpestrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpestrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpgtb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpgtb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpgtb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pcmpgtb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpgtb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpgtd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpgtd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpgtd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pcmpgtd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpgtd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpgtq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpgtq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpgtq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpgtw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pcmpgtw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpgtw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pcmpgtw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pcmpgtw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpistri: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpistri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpistri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpistri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpistri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpistri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpistri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipcmpistrm: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpistrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpistrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpistrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pcmpistrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pcmpistrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pcmpistrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipextrb: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrb(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrb(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrb(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipextrd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrd(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrd(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrd(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipextrq: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrq(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrq(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrq(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipextrw: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrw(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrw(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrw(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrw(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrw(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrw(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varMmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pextrw(varGpRegister0.Value.Value, varMmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varMmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pextrw(varGpRegister0.Value.Value, varMmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varMmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pextrw(varGpRegister0.Value.Value, varMmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipf2id: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pf2id(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pf2id(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipf2iw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pf2iw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pf2iw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfacc: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfacc(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfacc(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfadd: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfadd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfadd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfcmpeq: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfcmpeq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfcmpeq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfcmpge: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfcmpge(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfcmpge(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfcmpgt: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfcmpgt(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfcmpgt(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfmax: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfmax(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfmax(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfmin: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfmin(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfmin(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfmul: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfmul(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfmul(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfnacc: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfnacc(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfnacc(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfpnacc: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfpnacc(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfpnacc(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfrcp: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfrcp(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfrcp(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfrcpit1: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfrcpit1(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfrcpit1(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfrcpit2: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfrcpit2(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfrcpit2(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfrsqit1: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfrsqit1(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfrsqit1(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfrsqrt: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfrsqrt(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfrsqrt(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfsub: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfsub(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfsub(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipfsubr: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pfsubr(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pfsubr(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iphaddd: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Phaddd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phaddd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Phaddd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phaddd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iphaddsw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Phaddsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phaddsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Phaddsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phaddsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iphaddw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Phaddw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phaddw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Phaddw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phaddw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iphminposuw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Phminposuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phminposuw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iphsubd: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Phsubd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phsubd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Phsubd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phsubd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iphsubsw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Phsubsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phsubsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Phsubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phsubsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iphsubw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phsubw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Phsubw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Phsubw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Phsubw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipi2fd: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pi2fd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pi2fd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipi2fw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pi2fw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pi2fw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipinsrb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrb(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrb(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrb(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrb(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrb(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrb(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipinsrd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrd(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrd(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrd(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipinsrq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrq(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrq(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrq(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrq(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrq(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrq(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipinsrw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrw(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrw(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrw(varXmmRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrw(varMmRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrw(varMmRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrw(varMmRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pinsrw(varMmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pinsrw(varMmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pinsrw(varMmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaddubsw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmaddubsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaddubsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaddubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaddubsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaddwd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaddwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaddwd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmaddwd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaddwd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaxsb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaxsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxsb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaxsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaxsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaxsw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaxsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmaxsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaxub: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaxub(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxub(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmaxub(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxub(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaxud: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaxud(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxud(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmaxuw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmaxuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmaxuw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipminsb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pminsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminsb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipminsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pminsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipminsw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pminsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pminsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipminub: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pminub(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminub(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pminub(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminub(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipminud: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pminud(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminud(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipminuw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pminuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pminuw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovmskb: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovmskb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmovmskb(varGpRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovsxbd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovsxbd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovsxbd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovsxbq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovsxbq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovsxbq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovsxbw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovsxbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovsxbw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovsxdq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovsxdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovsxdq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovsxwd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovsxwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovsxwd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovsxwq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovsxwq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovsxwq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovzxbd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovzxbd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovzxbd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovzxbq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovzxbq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovzxbq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovzxbw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovzxbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovzxbw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovzxdq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovzxdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovzxdq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovzxwd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovzxwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovzxwd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmovzxwq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmovzxwq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmovzxwq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmuldq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmuldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmuldq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmulhrsw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmulhrsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmulhrsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmulhrsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmulhrsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmulhrw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmulhuw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmulhuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmulhuw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmulhuw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmulhuw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmulhw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmulhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmulhw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmulhw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmulhw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmulld: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmulld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmulld(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmullw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmullw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmullw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmullw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmullw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipmuludq: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pmuludq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmuludq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pmuludq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pmuludq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipop: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varSegRegister0 = new Lazy<MaybeOption<SegRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (SegRegister)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Pop(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Pop(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varSegRegister0.Value.Present) {
                            context.Pop(varSegRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipopa: {
                        if (instruction.Operands.Length == 0) {
                            context.Popa();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipopad:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipopcnt: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Popcnt(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Popcnt(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipopfd:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipopfq:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipopfw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipor: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Por(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Por(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Por(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Por(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iprefetch: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Prefetch(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Prefetch(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Prefetch(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iprefetchnta:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iprefetcht0:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iprefetcht1:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iprefetcht2:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsadbw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psadbw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psadbw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psadbw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipshufb: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pshufb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pshufb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pshufb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pshufb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipshufd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshufd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pshufd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pshufd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshufd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pshufd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pshufd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipshufhw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pshufhw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshufhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pshufhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pshufhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshufhw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pshufhw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipshuflw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshuflw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pshuflw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pshuflw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshuflw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pshuflw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pshuflw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipshufw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshufw(varMmRegister0.Value.Value, varMmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Pshufw(varMmRegister0.Value.Value, varMmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Pshufw(varMmRegister0.Value.Value, varMmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Pshufw(varMmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Pshufw(varMmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Pshufw(varMmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsignb: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psignb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psignb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psignb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psignb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsignd: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psignd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psignd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psignd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psignd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsignw: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psignw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psignw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psignw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psignw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipslld: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pslld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pslld(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Pslld(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Pslld(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Pslld(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pslld(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pslld(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Pslld(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Pslld(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Pslld(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipslldq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Pslldq(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Pslldq(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Pslldq(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsllq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psllq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psllq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psllq(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psllq(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psllq(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psllq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psllq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psllq(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psllq(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psllq(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsllw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psllw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psllw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psllw(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psllw(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psllw(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psllw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psllw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psllw(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psllw(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psllw(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsrad: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psrad(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrad(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrad(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrad(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrad(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psrad(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrad(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrad(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrad(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrad(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsraw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psraw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psraw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psraw(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psraw(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psraw(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psraw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psraw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psraw(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psraw(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psraw(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsrld: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psrld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrld(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrld(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrld(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrld(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psrld(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrld(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrld(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrld(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrld(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsrldq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrldq(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrldq(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrldq(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsrlq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psrlq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrlq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrlq(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrlq(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrlq(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psrlq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrlq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrlq(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrlq(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrlq(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsrlw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psrlw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrlw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrlw(varXmmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrlw(varXmmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrlw(varXmmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psrlw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psrlw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Psrlw(varMmRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varInt641.Value.Present) {
                            context.Psrlw(varMmRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Psrlw(varMmRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubq: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubsb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubsb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubsb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubsb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubsw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubsw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubsw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubusb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubusb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubusb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubusb(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubusb(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubusw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubusw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubusw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubusw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubusw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipsubw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Psubw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Psubw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Psubw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipswapd: {
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pswapd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pswapd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iptest: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Ptest(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Ptest(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpckhbw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpckhbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckhbw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Punpckhbw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckhbw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpckhdq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpckhdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckhdq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Punpckhdq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckhdq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpckhqdq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpckhqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckhqdq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpckhwd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpckhwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckhwd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Punpckhwd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckhwd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpcklbw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpcklbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpcklbw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Punpcklbw(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpcklbw(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpckldq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpckldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckldq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Punpckldq(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpckldq(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpcklqdq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpcklqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpcklqdq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipunpcklwd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Punpcklwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpcklwd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Punpcklwd(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Punpcklwd(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipush: {
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        var varInt640 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Int64)0));
                        var varUInt640 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (UInt64)0));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varSegRegister0 = new Lazy<MaybeOption<SegRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (SegRegister)null));
                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Push(varImmediate0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varInt640.Value.Present) {
                            context.Push(varInt640.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varUInt640.Value.Present) {
                            context.Push(varUInt640.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Push(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Push(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varSegRegister0.Value.Present) {
                            context.Push(varSegRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipusha: {
                        if (instruction.Operands.Length == 0) {
                            context.Pusha();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipushad:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipushfd:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipushfq:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipushfw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipxor: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMmRegister0 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (MmRegister)null));
                        var varMmRegister1 = new Lazy<MaybeOption<MmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (MmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Pxor(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pxor(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMmRegister1.Value.Present) {
                            context.Pxor(varMmRegister0.Value.Value, varMmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Pxor(varMmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ircl: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Rcl(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Rcl(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Rcl(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Rcl(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Rcl(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Rcl(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Rcl(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Rcl(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ircpps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Rcpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Rcpps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ircpss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Rcpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Rcpss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ircr: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Rcr(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Rcr(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Rcr(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Rcr(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Rcr(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Rcr(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Rcr(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Rcr(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Irdmsr:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Irdpmc:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Irdrand: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Rdrand(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Irdtsc: {
                        if (instruction.Operands.Length == 0) {
                            context.Rdtsc();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Irdtscp: {
                        if (instruction.Operands.Length == 0) {
                            context.Rdtscp();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Irep:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Irepne:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iret: {
                        var varImmediate0 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Immediate)null));
                        var varInt640 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Int64)0));
                        var varUInt640 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (UInt64)0));
                        if (instruction.Operands.Length == 0) {
                            context.Ret();
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varImmediate0.Value.Present) {
                            context.Ret(varImmediate0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varInt640.Value.Present) {
                            context.Ret(varInt640.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varUInt640.Value.Present) {
                            context.Ret(varUInt640.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iretf:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Irol: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Rol(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Rol(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Rol(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Rol(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Rol(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Rol(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Rol(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Rol(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iror: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Ror(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Ror(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Ror(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Ror(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Ror(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Ror(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Ror(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Ror(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iroundpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Roundpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Roundpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Roundpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Roundpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iroundps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Roundps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Roundps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Roundps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Roundps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iroundsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Roundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Roundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundsd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Roundsd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Roundsd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iroundss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Roundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Roundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Roundss(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Roundss(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Roundss(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Irsm:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Irsqrtps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Rsqrtps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Rsqrtps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Irsqrtss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Rsqrtss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Rsqrtss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isahf: {
                        if (instruction.Operands.Length == 0) {
                            context.Sahf();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isalc:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isar: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Sar(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Sar(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Sar(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Sar(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Sar(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Sar(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Sar(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Sar(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isbb: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Sbb(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Sbb(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Sbb(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Sbb(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Sbb(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Sbb(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Sbb(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Sbb(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Sbb(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iscasb: {
                        if (instruction.Operands.Length == 0) {
                            context.Scasb();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iscasd: {
                        if (instruction.Operands.Length == 0) {
                            context.Scasd();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iscasq: {
                        if (instruction.Operands.Length == 0) {
                            context.Scasq();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iscasw: {
                        if (instruction.Operands.Length == 0) {
                            context.Scasw();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iseta: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Seta(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Seta(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetae: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setae(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setae(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetb: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setb(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setb(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetbe: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setbe(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setbe(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetg: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setg(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setg(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetge: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setge(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setge(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetl: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setl(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setl(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetle: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setle(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setle(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetno: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setno(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setno(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetnp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setnp(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setnp(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetns: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setns(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setns(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetnz: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setnz(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setnz(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iseto: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Seto(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Seto(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetp: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setp(varMemory0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setp(varGpRegister0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isets: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Sets(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Sets(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isetz: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varGpRegister0.Value.Present) {
                            context.Setz(varGpRegister0.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Setz(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isfence: {
                        if (instruction.Operands.Length == 0) {
                            context.Sfence();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isgdt:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ishl: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Shl(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Shl(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Shl(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Shl(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Shl(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Shl(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Shl(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Shl(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ishld: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varGpRegister2.Value.Present) {
                            context.Shld(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varGpRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varGpRegister2.Value.Present) {
                            context.Shld(varMemory0.Value.Value, varGpRegister1.Value.Value, varGpRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Shld(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Shld(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Shld(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Shld(varMemory0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Shld(varMemory0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Shld(varMemory0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ishr: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Shr(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Shr(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Shr(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Shr(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Shr(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Shr(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Shr(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Shr(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ishrd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varGpRegister2.Value.Present) {
                            context.Shrd(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varGpRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varGpRegister2.Value.Present) {
                            context.Shrd(varMemory0.Value.Value, varGpRegister1.Value.Value, varGpRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Shrd(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Shrd(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Shrd(varGpRegister0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Shrd(varMemory0.Value.Value, varGpRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varInt642.Value.Present) {
                            context.Shrd(varMemory0.Value.Value, varGpRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varGpRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Shrd(varMemory0.Value.Value, varGpRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ishufpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Shufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Shufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Shufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Shufpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Shufpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Shufpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ishufps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Shufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Shufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Shufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Shufps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Shufps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Shufps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isidt:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iskinit:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isldt:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ismsw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isqrtpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Sqrtpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Sqrtpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isqrtps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Sqrtps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Sqrtps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isqrtsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Sqrtsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Sqrtsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isqrtss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Sqrtss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Sqrtss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istc: {
                        if (instruction.Operands.Length == 0) {
                            context.Stc();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istd: {
                        if (instruction.Operands.Length == 0) {
                            context.Std();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istgi:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isti:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Istmxcsr: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Stmxcsr(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istosb: {
                        if (instruction.Operands.Length == 0) {
                            context.Stosb();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istosd: {
                        if (instruction.Operands.Length == 0) {
                            context.Stosd();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istosq: {
                        if (instruction.Operands.Length == 0) {
                            context.Stosq();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istosw: {
                        if (instruction.Operands.Length == 0) {
                            context.Stosw();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Istr:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isub: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Sub(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Sub(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Sub(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Sub(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Sub(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Sub(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Sub(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Sub(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Sub(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isubpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Subpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Subpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isubps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Subps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Subps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isubsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Subsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Subsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Isubss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Subss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Subss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iswapgs:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isyscall:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isysenter:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isysexit:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Isysret:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Itest: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Test(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Test(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Test(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Test(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Test(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Test(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Test(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Test(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iucomisd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Ucomisd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Ucomisd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iucomiss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Ucomiss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Ucomiss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iud2: {
                        if (instruction.Operands.Length == 0) {
                            context.Ud2();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iunpckhpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Unpckhpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Unpckhpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iunpckhps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Unpckhps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Unpckhps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iunpcklpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Unpcklpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Unpcklpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iunpcklps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Unpcklps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Unpcklps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaddpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaddpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vaddpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaddps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaddps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vaddps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaddsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaddsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaddss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaddss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaddsubpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaddsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vaddsubpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddsubpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaddsubps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaddsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vaddsubps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaddsubps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaesdec: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaesdec(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaesdec(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaesdeclast: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaesdeclast(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaesdeclast(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaesenc: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaesenc(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaesenc(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaesenclast: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vaesenclast(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vaesenclast(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaesimc: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vaesimc(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vaesimc(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivaeskeygenassist: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vaeskeygenassist(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vaeskeygenassist(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vaeskeygenassist(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vaeskeygenassist(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vaeskeygenassist(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vaeskeygenassist(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivandnpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vandnpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandnpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vandnpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandnpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivandnps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vandnps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandnps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vandnps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandnps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivandpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vandpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vandpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivandps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vandps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vandps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vandps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivblendpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vblendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vblendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vblendpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vblendpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivblendps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vblendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vblendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vblendps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vblendps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vblendps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vblendps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivblendvpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varXmmRegister3 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varYmmRegister3 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varXmmRegister3.Value.Present) {
                            context.Vblendvpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varXmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varXmmRegister3.Value.Present) {
                            context.Vblendvpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varXmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varYmmRegister3.Value.Present) {
                            context.Vblendvpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varYmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varYmmRegister3.Value.Present) {
                            context.Vblendvpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varYmmRegister3.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivblendvps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varXmmRegister3 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varYmmRegister3 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varXmmRegister3.Value.Present) {
                            context.Vblendvps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varXmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varXmmRegister3.Value.Present) {
                            context.Vblendvps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varXmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varYmmRegister3.Value.Present) {
                            context.Vblendvps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varYmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varYmmRegister3.Value.Present) {
                            context.Vblendvps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varYmmRegister3.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivbroadcastsd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vbroadcastsd(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vbroadcastsd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivbroadcastss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vbroadcastss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vbroadcastss(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vbroadcastss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vbroadcastss(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcmppd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vcmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vcmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmppd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vcmppd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmppd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmppd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vcmppd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmppd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcmpps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcmpsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcmpss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vcmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vcmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vcmpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcomisd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcomisd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcomisd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcomiss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcomiss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcomiss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtdq2pd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtdq2pd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtdq2pd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtdq2pd(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtdq2pd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtdq2ps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtdq2ps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtdq2ps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vcvtdq2ps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtdq2ps(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtpd2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtpd2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vcvtpd2dq(varXmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtpd2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtpd2ps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtpd2ps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vcvtpd2ps(varXmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtpd2ps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtps2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtps2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtps2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vcvtps2dq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtps2dq(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtps2pd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtps2pd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtps2pd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtps2pd(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtps2pd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtsd2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtsd2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtsd2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtsd2ss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vcvtsd2ss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vcvtsd2ss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtsi2sd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present) {
                            context.Vcvtsi2sd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vcvtsi2sd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtsi2ss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present) {
                            context.Vcvtsi2ss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vcvtsi2ss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtss2sd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vcvtss2sd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vcvtss2sd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvtss2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvtss2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvtss2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvttpd2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvttpd2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vcvttpd2dq(varXmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvttpd2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvttps2dq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvttps2dq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvttps2dq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vcvttps2dq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvttps2dq(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvttsd2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvttsd2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvttsd2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivcvttss2si: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vcvttss2si(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vcvttss2si(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivdivpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vdivpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vdivpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vdivpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vdivpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivdivps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vdivps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vdivps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vdivps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vdivps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivdivsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vdivsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vdivsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivdivss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vdivss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vdivss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivdppd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vdppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vdppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vdppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vdppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vdppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vdppd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivdpps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vdpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vdpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vdpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vdpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vdpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vdpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vdpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vdpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vdpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vdpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vdpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vdpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iverr:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iverw:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivextractf128: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vextractf128(varXmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vextractf128(varXmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vextractf128(varXmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vextractf128(varMemory0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vextractf128(varMemory0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vextractf128(varMemory0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivextractps: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vextractps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vextractps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vextractps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vextractps(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vextractps(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vextractps(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivhaddpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vhaddpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhaddpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vhaddpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhaddpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivhaddps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vhaddps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhaddps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vhaddps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhaddps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivhsubpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vhsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vhsubpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhsubpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivhsubps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vhsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vhsubps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vhsubps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivinsertf128: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vinsertf128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vinsertf128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vinsertf128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vinsertf128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vinsertf128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vinsertf128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivinsertps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vinsertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vinsertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vinsertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vinsertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vinsertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vinsertps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivlddqu: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vlddqu(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vlddqu(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmaskmovdqu: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmaskmovdqu(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmaskmovpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaskmovpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaskmovpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmaskmovpd(varMemory0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vmaskmovpd(varMemory0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmaskmovps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaskmovps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaskmovps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmaskmovps(varMemory0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vmaskmovps(varMemory0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmaxpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmaxpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaxpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vmaxpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaxpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmaxps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmaxps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaxps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vmaxps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaxps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmaxsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmaxsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaxsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmaxss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmaxss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmaxss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmcall:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmclear:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivminpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vminpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vminpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vminpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vminpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivminps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vminps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vminps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vminps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vminps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivminsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vminsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vminsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivminss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vminss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vminss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmlaunch:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmload:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmmcall:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovapd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovapd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovapd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovapd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovapd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovapd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovapd(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovaps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovaps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovaps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovaps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovaps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovaps(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovaps(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Vmovd(varXmmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovddup: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovddup(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovddup(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovddup(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovddup(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovdqa: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovdqa(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovdqa(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovdqa(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovdqa(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovdqa(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovdqa(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovdqu: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovdqu(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovdqu(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovdqu(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovdqu(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovdqu(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovdqu(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovhlps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmovhlps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovhpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmovhpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovhpd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovhps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmovhps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovhps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovlhps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmovlhps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovlpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmovlpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovlpd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovlps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmovlps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovlps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovmskpd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovmskpd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovmskpd(varGpRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovmskps: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovmskps(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovmskps(varGpRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovntdq: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovntdq(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovntdq(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovntdqa: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovntdqa(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovntdqa(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovntpd: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovntpd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovntpd(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovntps: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovntps(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovntps(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovq(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Vmovq(varXmmRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmovsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovsd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovshdup: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovshdup(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovshdup(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovshdup(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovshdup(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovsldup: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovsldup(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovsldup(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovsldup(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovsldup(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmovss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovss(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovupd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovupd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovupd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovupd(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovupd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovupd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovupd(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmovups: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovups(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovups(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vmovups(varMemory0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovups(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vmovups(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vmovups(varMemory0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmpsadbw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vmpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vmpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vmpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vmpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vmpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vmpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vmpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vmpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vmpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vmpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vmpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vmpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmptrld:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmptrst:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmread:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmresume:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmrun:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmsave:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmulpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmulpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmulpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vmulpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmulpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmulps: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vmulps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmulps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmulps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmulps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmulsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmulsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmulsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmulss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vmulss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vmulss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmwrite:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmxoff:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivmxon:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivorpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vorpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vorpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vorpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vorpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivorps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vorps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vorps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vorps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vorps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpabsb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vpabsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpabsb(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpabsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpabsb(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpabsd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vpabsd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpabsd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpabsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpabsd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpabsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vpabsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpabsw(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpabsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpabsw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpackssdw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpackssdw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpackssdw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpackssdw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpackssdw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpacksswb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpacksswb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpacksswb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpacksswb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpacksswb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpackusdw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpackusdw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpackusdw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpackusdw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpackusdw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpackuswb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpackuswb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpackuswb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpackuswb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpackuswb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddsb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddusb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddusb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddusb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddusb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddusb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddusw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddusw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddusw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddusw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddusw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpaddw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpaddw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpaddw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpaddw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpalignr: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpalignr(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpalignr(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpalignr(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpalignr(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpalignr(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpalignr(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpalignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpalignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpalignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpalignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpalignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpalignr(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpand: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpand(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpand(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpand(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpand(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpandn: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpandn(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpandn(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpandn(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpandn(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpavgb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpavgb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpavgb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpavgb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpavgb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpavgw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpavgw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpavgw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpavgw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpavgw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpblendvb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varYmmRegister3 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varXmmRegister3 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (XmmRegister)null));
                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varYmmRegister3.Value.Present) {
                            context.Vpblendvb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varYmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varYmmRegister3.Value.Present) {
                            context.Vpblendvb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varYmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varXmmRegister3.Value.Present) {
                            context.Vpblendvb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varXmmRegister3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varXmmRegister3.Value.Present) {
                            context.Vpblendvb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varXmmRegister3.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpblendw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpblendw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpblendw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpblendw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpblendw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpblendw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpblendw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpblendw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpclmulqdq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpclmulqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpeqb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpeqb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpeqb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpeqd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpeqd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpeqd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpeqq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpeqq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpeqq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpeqw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpeqw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpeqw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpeqw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpestri: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpestri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpestri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpestri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpestri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpestri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpestri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpestrm: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpestrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpestrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpestrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpestrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpestrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpestrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpgtb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpgtb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpgtb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpgtd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpgtd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpgtd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpgtq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpgtq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpgtq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpgtw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpcmpgtw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpcmpgtw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpcmpgtw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpistri: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpistri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpistri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpistri(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpistri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpistri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpistri(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpcmpistrm: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpistrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpistrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpistrm(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpcmpistrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpcmpistrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpcmpistrm(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivperm2f128: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vperm2f128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vperm2f128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vperm2f128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vperm2f128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vperm2f128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vperm2f128(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpermilpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilpd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpermilps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpermilps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpermilps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpextrb: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrb(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrb(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrb(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpextrd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrd(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrd(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrd(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrd(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpextrq: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrq(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrq(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrq(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrq(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpextrw: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrw(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrw(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrw(varGpRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpextrw(varMemory0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpextrw(varMemory0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varMemory0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpextrw(varMemory0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivphaddd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphaddd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vphaddd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vphaddd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphaddd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivphaddsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphaddsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vphaddsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vphaddsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphaddsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivphaddw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphaddw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vphaddw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vphaddw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphaddw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivphminposuw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vphminposuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vphminposuw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivphsubd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphsubd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vphsubd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vphsubd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphsubd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivphsubsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphsubsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vphsubsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vphsubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphsubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivphsubw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphsubw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vphsubw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vphsubw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vphsubw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpinsrb: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpinsrd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpinsrq: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpinsrw: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varGpRegister2 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (GpRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varGpRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varGpRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vpinsrw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vpinsrw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vpinsrw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaddubsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaddubsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaddubsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaddubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaddubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaddwd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaddwd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaddwd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaddwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaddwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaxsb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaxsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaxsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaxsd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxsd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaxsd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaxsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaxsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaxsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaxsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaxub: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxub(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaxub(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaxub(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxub(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaxud: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxud(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaxud(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaxud(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxud(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmaxuw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxuw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmaxuw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmaxuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmaxuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpminsb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpminsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpminsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpminsd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminsd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpminsd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpminsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpminsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpminsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpminsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpminub: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminub(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpminub(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpminub(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminub(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpminud: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminud(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpminud(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpminud(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminud(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpminuw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminuw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpminuw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpminuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpminuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovmskb: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vpmovmskb(varGpRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovmskb(varGpRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovsxbd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxbd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxbd(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxbd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxbd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovsxbq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxbq(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxbq(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxbq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxbq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovsxbw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxbw(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxbw(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxbw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovsxwd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxwd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxwd(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxwd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovsxwq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxwq(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxwq(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovsxwq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovsxwq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovzxbd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxbd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxbd(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxbd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxbd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovzxbq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxbq(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxbq(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxbq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxbq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovzxbw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxbw(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxbw(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxbw(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovzxdq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxdq(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxdq(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxdq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovzxwd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxwd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxwd(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxwd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmovzxwq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxwq(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxwq(varYmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vpmovzxwq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vpmovzxwq(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmuldq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmuldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmuldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmuldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmuldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmulhrsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulhrsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmulhrsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmulhrsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulhrsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmulhuw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulhuw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmulhuw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmulhuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulhuw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmulhw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulhw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmulhw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmulhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmulld: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmulld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmulld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmulld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpmullw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmullw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpmullw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpmullw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpmullw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpor: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpor(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpor(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpor(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpor(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsadbw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsadbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsadbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpshufb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpshufb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpshufb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpshufb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpshufb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpshufd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpshufhw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufhw(varYmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufhw(varYmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufhw(varYmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufhw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufhw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufhw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufhw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshufhw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpshufhw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshufhw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpshuflw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshuflw(varYmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpshuflw(varYmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshuflw(varYmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshuflw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpshuflw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshuflw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshuflw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpshuflw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshuflw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpshuflw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vpshuflw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vpshuflw(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsignb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsignb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsignb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsignb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsignb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsignd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsignd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsignd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsignd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsignd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsignw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsignw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsignw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsignw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsignw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpslld: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpslld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpslld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpslld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpslld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpslld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpslld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpslld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpslld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpslld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpslld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpslldq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpslldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpslldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpslldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpslldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpslldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpslldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsllq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsllq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsllq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsllq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsllq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsllq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsllq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsllq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsllq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsllq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsllq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsllw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsllw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsllw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsllw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsllw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsllw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsllw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsllw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsllw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsllw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsllw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsrad: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrad(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrad(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrad(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrad(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrad(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrad(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrad(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrad(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrad(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrad(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsraw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsraw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsraw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsraw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsraw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsraw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsraw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsraw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsraw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsraw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsraw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsrld: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrld(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrld(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsrldq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsrlq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrlq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrlq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrlq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrlq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrlq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrlq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrlq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrlq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrlq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrlq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsrlw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrlw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrlw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrlw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrlw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrlw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsrlw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsrlw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vpsrlw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vpsrlw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vpsrlw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubsb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubsb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubsb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubsw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubsw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubsw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubusb: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubusb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubusb(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubusb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubusb(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubusw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubusw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubusw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubusw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubusw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpsubw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpsubw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpsubw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpsubw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivptest: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vptest(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vptest(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vptest(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vptest(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpckhbw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpckhbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpckhbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpckhdq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhdq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpckhdq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpckhdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpckhqdq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhqdq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpckhqdq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpckhqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpckhwd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhwd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpckhwd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpckhwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckhwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpcklbw: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpcklbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpcklbw(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpcklbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpcklbw(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpckldq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpckldq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpckldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpckldq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpcklqdq: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpcklqdq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpcklqdq(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpcklqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpcklqdq(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpunpcklwd: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpcklwd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpunpcklwd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpunpcklwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpunpcklwd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivpxor: {
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpxor(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vpxor(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vpxor(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vpxor(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivrcpps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vrcpps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vrcpps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vrcpps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vrcpps(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivrcpss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vrcpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vrcpss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivroundpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vroundpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vroundpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundpd(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vroundpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundpd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vroundpd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundpd(varYmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivroundps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varImmediate2 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Immediate)null));
                        var varInt642 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Int64)0));
                        var varUInt642 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (UInt64)0));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vroundps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vroundps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundps(varXmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varInt642.Value.Present) {
                            context.Vroundps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varUInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varImmediate2.Value.Present) {
                            context.Vroundps(varYmmRegister0.Value.Value, varMemory1.Value.Value, varImmediate2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varInt642.Value.Present) {
                            context.Vroundps(varYmmRegister0.Value.Value, varMemory1.Value.Value, varInt642.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varMemory1.Value.Present && varUInt642.Value.Present) {
                            context.Vroundps(varYmmRegister0.Value.Value, varMemory1.Value.Value, varUInt642.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivroundsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vroundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vroundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vroundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vroundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vroundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vroundsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivroundss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vroundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vroundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vroundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vroundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vroundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vroundss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivrsqrtps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vrsqrtps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vrsqrtps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vrsqrtps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vrsqrtps(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivrsqrtss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vrsqrtss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vrsqrtss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivshufpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vshufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vshufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vshufpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vshufpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivshufps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varImmediate3 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Immediate)null));
                        var varInt643 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (Int64)0));
                        var varUInt643 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[3], (UInt64)0));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vshufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vshufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varInt643.Value.Present) {
                            context.Vshufps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value, varUInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varImmediate3.Value.Present) {
                            context.Vshufps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varImmediate3.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varInt643.Value.Present) {
                            context.Vshufps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varInt643.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 4 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present && varUInt643.Value.Present) {
                            context.Vshufps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value, varUInt643.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsqrtpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vsqrtpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vsqrtpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vsqrtpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vsqrtpd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsqrtps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vsqrtps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vsqrtps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vsqrtps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vsqrtps(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsqrtsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vsqrtsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsqrtsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsqrtss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vsqrtss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsqrtss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivstmxcsr: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Vstmxcsr(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsubpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsubpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vsubpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsubpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsubps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsubps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vsubps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsubps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsubsd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vsubsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsubsd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivsubss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vsubss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vsubss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivtestpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vtestpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vtestpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vtestpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vtestpd(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivtestps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vtestps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vtestps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present) {
                            context.Vtestps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varYmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vtestps(varYmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivucomisd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vucomisd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vucomisd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivucomiss: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Vucomiss(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Vucomiss(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivunpckhpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vunpckhpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpckhpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vunpckhpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpckhpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivunpckhps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vunpckhps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpckhps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vunpckhps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpckhps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivunpcklpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vunpcklpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpcklpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vunpcklpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpcklpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivunpcklps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vunpcklps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpcklps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vunpcklps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vunpcklps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivxorpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vxorpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vxorpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vxorpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vxorpd(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivxorps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varXmmRegister2 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (XmmRegister)null));
                        var varMemory2 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (Memory)null));
                        var varYmmRegister0 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (YmmRegister)null));
                        var varYmmRegister1 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (YmmRegister)null));
                        var varYmmRegister2 = new Lazy<MaybeOption<YmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[2], (YmmRegister)null));
                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varXmmRegister2.Value.Present) {
                            context.Vxorps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varXmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vxorps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varYmmRegister2.Value.Present) {
                            context.Vxorps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varYmmRegister2.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 3 && varYmmRegister0.Value.Present && varYmmRegister1.Value.Present && varMemory2.Value.Present) {
                            context.Vxorps(varYmmRegister0.Value.Value, varYmmRegister1.Value.Value, varMemory2.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivzeroall: {
                        if (instruction.Operands.Length == 0) {
                            context.Vzeroall();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ivzeroupper: {
                        if (instruction.Operands.Length == 0) {
                            context.Vzeroupper();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Iwait:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iwbinvd:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iwrmsr:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixadd: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Xadd(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Xadd(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixchg: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Xchg(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Xchg(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Xchg(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixcryptcbc:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixcryptcfb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixcryptctr:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixcryptecb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixcryptofb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixgetbv: {
                        if (instruction.Operands.Length == 0) {
                            context.Xgetbv();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixlatb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixor: {
                        var varGpRegister0 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (GpRegister)null));
                        var varGpRegister1 = new Lazy<MaybeOption<GpRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (GpRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        var varImmediate1 = new Lazy<MaybeOption<Immediate>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Immediate)null));
                        var varInt641 = new Lazy<MaybeOption<Int64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Int64)0));
                        var varUInt641 = new Lazy<MaybeOption<UInt64>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (UInt64)0));
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varGpRegister1.Value.Present) {
                            context.Xor(varGpRegister0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Xor(varGpRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varImmediate1.Value.Present) {
                            context.Xor(varGpRegister0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varInt641.Value.Present) {
                            context.Xor(varGpRegister0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varGpRegister0.Value.Present && varUInt641.Value.Present) {
                            context.Xor(varGpRegister0.Value.Value, varUInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varGpRegister1.Value.Present) {
                            context.Xor(varMemory0.Value.Value, varGpRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varImmediate1.Value.Present) {
                            context.Xor(varMemory0.Value.Value, varImmediate1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varInt641.Value.Present) {
                            context.Xor(varMemory0.Value.Value, varInt641.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varMemory0.Value.Present && varUInt641.Value.Present) {
                            context.Xor(varMemory0.Value.Value, varUInt641.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixorpd: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Xorpd(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Xorpd(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixorps: {
                        var varXmmRegister0 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (XmmRegister)null));
                        var varXmmRegister1 = new Lazy<MaybeOption<XmmRegister>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (XmmRegister)null));
                        var varMemory1 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[1], (Memory)null));
                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varXmmRegister1.Value.Present) {
                            context.Xorps(varXmmRegister0.Value.Value, varXmmRegister1.Value.Value);
                            return;
                        }

                        if (instruction.Operands.Length == 2 && varXmmRegister0.Value.Present && varMemory1.Value.Present) {
                            context.Xorps(varXmmRegister0.Value.Value, varMemory1.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixrstor: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Xrstor(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixsave: {
                        var varMemory0 = new Lazy<MaybeOption<Memory>>(() => OperandToAsmJit.GetOperand(context, instruction, instruction.Operands[0], (Memory)null));
                        if (instruction.Operands.Length == 1 && varMemory0.Value.Present) {
                            context.Xsave(varMemory0.Value.Value);
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixsetbv: {
                        if (instruction.Operands.Length == 0) {
                            context.Xsetbv();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixsha1:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixsha256:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ixstore:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Iinvalid:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_I3dnow:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Inone:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Idb:
                    throw new AssembleException($"unsupported instruction: {instruction}");
                case ud_mnemonic_code.UD_Ipause: {
                        if (instruction.Operands.Length == 0) {
                            context.Pause();
                            return;
                        }
                    }
                    throw new AssembleException($"unsupported operands to instruction: {instruction}");
                case ud_mnemonic_code.UD_MAX_MNEMONIC_CODE:
                    throw new AssembleException($"unsupported instruction: {instruction}");
            }
        }
    }
}
*/